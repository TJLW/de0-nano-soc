#!/bin/bash
# mksdcard - Tool to create SD-Cards for Intel FPGA SoC
# Copyright (C) 2017  Svein Seldal <sveinse@seldal.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
 
VERSION=1.0
ME="$(basename $0)"


# -- Default settings
blkdev=
size=1G
mkfsext4=mkfs.ext4
mkfsext4_opts="-O ^huge_file"

bootfs=sd_fat.tar.gz
rootfs=rootfs.tar.gz
kernel=zImage
preloader=preloader-mkpimage.bin
uboot=u-boot.img

part1_size=+64M
part1_type=0b
part3_start_sector=2048
part3_size=+512k
part3_type=a2

tmpdir=
verbose=

# -- Logger
log () {
    echo "$ME: $*"
}
quit () {
    errcode="$1"
    shift
    [[ "$*" ]] && log "$*"
    exit $errcode
}

# -- Print usage
usage () {
    cat <<EOF
mksdcard $VERSION - Tool to create SD-Cards for Intel FPGA SoC
Copyright (C) 2017  Svein Seldal <sveinse@seldal.com>
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>

This is free software; you are free to change and redistribute it.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

Usage: $ME [OPTIONS] IMAGE|DEVICE

   Partition and populate SD-Card for use on Intel SoC FPGAs. DEVICE can
   be a block device or a IMAGE file.

   Since this tool only writes the payload data, writing an image directly
   to a DEVICE is more efficient than making a IMAGE and then copying it to
   a SD-Card using dd or similar.

   Unless mkfs.ext4 support the -d option, this tool requires to be run as
   root.

Options:
   --debug            Enable debugging
   --boot TGZ|DIR     Use boot file system. Default: ${bootfs}
   --kernel FILE      Use selected kernel. Default: ${kernel}
   --mkfs.ext4 CMD    Use alternate command for mkfs.ext4 *)
   --preloader FILE   Use selected preloader. Default: ${preloader}
   --rootfs FILE|DIR  Use root file system. Default: ${rootfs}
   --size SIZE        Make image of SIZE. Default: ${size}
   --uboot FILE       Use selected u-boot. Default: ${uboot}
   --verbose          Enable verbose mode
   --version          Print version and quit
   -h, --help         Show help and quit

*) Specifying alternate mkfs.ext4 is useful to run this command without becoming
   root. Yocto provides a patched version of mkfs.ext4 which has an additional
   -d option to populate the rootfs without mounting the filesystem. Under a
   Yocto build this executeable can typically found under:
       build/tmp/sysroots-components/x86_64/e2fsprogs-native/sbin/mkfs.ext4

EOF
}

# -- Parse arguments
args=()
while [ "$#" -gt 0 ]
do
    case "$1" in
        --debug)
            debug=1
            ;;
        --boot)
            bootfs="$2"
            shift
            ;;
        --rootfs)
            rootfs="$2"
            shift
            ;;
        --kernel)
            kernel="$2"
            shift
            ;;
        --mkfs.ext4)
            mkfsext4="$2"
            shift
            ;;
        --preloader)
            preloader="$2"
            shift
            ;;
        --size)
            size="$2"
            shift
            ;;
        --uboot)
            uboot="$2"
            shift
            ;;
        --verbose)
            verbose=1
            ;;
        --version)
            quit 0 "$VERSION"
            ;;
        -h|--help)
            usage
            exit 1
            ;;
        --)
            shift
            break
            ;;
        -*)
            quit 6 "Invalid option '$1'"
            ;;
        *)
            args+=("$1")
            ;;
    esac
    shift
done

# Catch up any args after -- as well
while [ "$#" -gt 0 ]; do
      args+=("$1")
      shift
done

if [[ ${#args[@]} -eq 0 ]]; then
    quit 1 "Too few arguments."
fi
device="${args[0]}"

# -- Debug mode?
if [[ "$debug" ]]; then
    set -x
    export PS4='   --->  $LINENO:  '
fi

# -- Error/quit handlers
errcode=
final () {
    set +x
    # This function will be run on closure on both success and failures
    [[ "$tmpdir" ]] && rm -rf "$tmpdir"
}
abort () {
    log "Execution was aborted, quitting"
    quit 99
}

trap final 0
trap abort 1 2 3 6 15


#==============================================================================

# -- Make working dir
tmpdir="$(mktemp -d --tmp="$PWD")"
device_p1="$tmpdir/p1"
device_p2="$tmpdir/p2"
device_p3="$tmpdir/p3"

[[ "$(id -u)" = "0" ]] && isroot=1

if [[ -b "${device}" ]]; then
    if [[ ! "$isroot" ]]; then
        quit 1 "Output image is a blockdevice '${device}'. This command must be run as root"
    fi
    blkdev=1
else
    # Test if mkfs.ext4 can generate rootfs image without actually being root
    "${mkfsext4}" "$tmpdir/mkfstest" -d "$tmpdir" 1024 >/dev/null 2>&1
    res="$?"
    if [[ $res -ne 0 ]]; then
        if [[ ! "$isroot" ]]; then
            quit 1 "mkfs.ext4 does not support -d. This command must be called as root"
        fi
    fi
fi

# Make sure the bootfs and rootfs are present
[[ ! -e "${bootfs}" ]] && quit 1 "Missing boot '${bootfs}'"
[[ ! -e "${rootfs}" ]] && quit 1 "Missing rootfs '${rootfs}'"


#==============================================================================
main()
{

# -- New fd3 based logger
log () {
    echo "$ME: $*" >&3
}

findindir () {
    base="$(basename "$1")"
    fi=(); while IFS= read -rd '' f; do fi+=("$f"); done < <(find "$2" -name "$base" -print0)
    if [[ ${#fi[@]} -eq 0 ]]; then
        return 1
    fi
    match="${fi[0]}"
    return 0
}


# -- Unpack the bootfs
log "Boot filesystem '$bootfs'"
tmpboot="$tmpdir/boot"
mkdir -p "$tmpboot"
if [[ -d "$bootfs" ]]; then
    cp -a "$bootfs/." "$tmpboot"
    find "$tmpboot" >&3
else
    tar -C "$tmpboot" -xf "$bootfs"
fi

# -- Root file system
log "Root filesystem '$rootfs'"

# -- Copy or find the preloader
if [[ -e "$preloader" ]]; then
    log "Preloader '$preloader'"
    cp -L "$preloader" "$tmpboot"
else
    # Search for a preloader in the bootfs
    if ! findindir "$preloader" "$tmpboot"; then
        quit 1 "No preloader '$preloader' could be found. Use --preloader to specify"
    fi
    log "Found preloader '${match#$tmpboot/}' in boot" 
    preloader="$match"
fi

# -- Copy or find the bootloader
if [[ -e "$uboot" ]]; then
    log "U-boot '$uboot'"
    cp -L "$uboot" "$tmpboot"
else
    # Search for a u-boot in the bootfs
    if ! findindir "$uboot" "$tmpboot"; then
        quit 1 "No u-boot '$uboot' could be found. Use --uboot to specify"
    fi
    log "Found u-boot '${match#$tmpboot/}' in boot" 
    uboot="$match"
fi

# -- Copy or find the kernel
if [[ -e "$kernel" ]]; then
    log "Kernel '$kernel'"
    cp -L "$kernel" "$tmpboot"
else
    # Search for a kernel in the bootfs
    if findindir "$kernel" "$tmpboot"; then
        log "Found kernel '${match#$tmpboot/}' in boot"
        kernel="$match"
    
    else
        # Search for a kernel in the rootfs
        if [[ -d "$rootfs" ]]; then
            tmproot="$rootfs"
        else
            tmproot="$tmpdir/r.tmp"
            mkdir -p "$tmproot"
            tar -C "$tmproot" -xf "$rootfs" boot ./boot
        fi
        if ! findindir "$kernel" "$tmproot/boot"; then
            quit 1 "No kernel '$kernel' could be found. Use --kernel to specify"
        fi
        log "Found kernel '${match#$tmproot/}' in rootfs"
        kernel="$match"
        cp -L "$match" "$tmpboot"
    fi
fi


#==============================================================================

get_partinfo () 
{
    declare -gA partinfo=()
    while read -ra col; do

        # Consider only lines with 7 or 8 fields
        [[ ${#col[@]} -ge 7 && ${#col[@]} -le 8 ]] || continue

        # Consider only lines beginning containing the device name
        case "${col[0]}" in
            "${device}"*)
                ;;
            *)
                continue
                ;;
        esac

        # Get the partition number
        p="${col[0]#${device}}"
        p="${p#p}"

        # Read the fdisk fields. If the second field is '*', remove it
        [[ "${col[1]}" = "*" ]] && unset col[1]
        pd=("${col[@]}")

        # fdisk fields, boot removed
        #   Device (Boot) Start End Sectors Size Id Type
        partinfo["${p}_device"]="${pd[0]}"
        partinfo["${p}_start"]="${pd[1]}"
        partinfo["${p}_end"]="${pd[2]}"
        partinfo["${p}_sectors"]="${pd[3]}"
        partinfo["${p}_size"]="${pd[4]}"
        partinfo["${p}_id"]="${pd[5]}"
        partinfo["${p}_type"]="${pd[6]}"

    done < <(fdisk -l "${device}")

    # How to print the associative array:
    #for key in "${!partinfo[@]}"; do 
    #    log "KEY '$key' = '${partinfo["$key"]}'"
    #done
}

# Create the device
if [[ ! "$blkdev" ]]; then
    log "Creating new image file '${device}' of size ${size}"
    rm -f ${device}
    truncate -s ${size} ${device}
fi

# Wipe the partition table and create a new one
log "Creating new partition table in '${device}'"
dd if=/dev/zero of=${device} bs=512 count=${part3_start_sector} conv=notrunc,sparse
printf "o\nn\np\n3\n${part3_start_sector}\n${part3_size}\nn\np\n1\n\n${part1_size}\nn\np\n2\n\n\nt\n1\n${part1_type}\nt\n3\n${part3_type}\np\nw\n" | fdisk ${device}

# Get the partition info
get_partinfo

# Get the device names for the partitions
if [[ "$blkdev" ]]; then
    # Get the device
    device_p1="${partinfo[1_device]}"
    device_p2="${partinfo[2_device]}"
    device_p3="${partinfo[3_device]}"
fi

log "Partition info:"
log "           Partition    Start      Size          Type"
for p in {1..3}; do 
    log "$(printf "    %16s  %7s   %7s (%4s)   %s (%s)" \
        "${partinfo[${p}_device]}" \
        "${partinfo[${p}_start]}" \
        "${partinfo[${p}_sectors]}" \
        "${partinfo[${p}_size]}" \
        "${partinfo[${p}_type]}" \
        "${partinfo[${p}_id]}" \
        )"
done


#==============================================================================
log "Install partition 1 (boot)..."

p_device_p1="${device_p1#$PWD/}"

# Create the partition
if [[ ! "$blkdev" ]]; then
    log "Create image file '${p_device_p1}' of ${partinfo[1_size]}"
    dd if=/dev/zero of=${device_p1} bs=512 count=${partinfo[1_sectors]} conv=sparse
fi

# Format and copy the data
log "Format partition '${p_device_p1}' as vfat"
mkfs.vfat ${device_p1} -S 512

log "Install files from '$bootfs'"
if [[ "$verbose" ]]; then
    mcopy -v -i ${device_p1} -s "$tmpboot/"* ::/ >&3 2>&3
else
    mcopy -i ${device_p1} -s "$tmpboot/"* ::/
fi

# Copy the partition back to the image
if [[ ! "$blkdev" ]]; then
    log "Copy partition image data to '${device}'"
    dd if=${device_p1} of=${device} bs=512 count=${partinfo[1_sectors]} seek=${partinfo[1_start]} conv=sparse,notrunc
fi


#==============================================================================
log "Install partition 2 (rootfs)..."

p_device_p2="${device_p2#$PWD/}"

# Create the partition
if [[ ! "$blkdev" ]]; then
    log "Create image file '${p_device_p2}'"
    dd if=/dev/zero of=${device_p2} bs=512 count=${partinfo[2_sectors]} conv=sparse
fi

if [[ "$isroot" ]]; then
    # Copy file system to disk as root
    log "Format partition '${p_device_p2}' as ext4"
    $mkfsext4 -F "${device_p2}" $mkfsext4_opts

    log "Mount '${p_device_p2}'"
    mkdir -p "$tmpdir/rootfs"
    mount "${device_p2}" "$tmpdir/rootfs"

    log "Install files from '$rootfs'"
    if [[ "$verbose" ]]; then
        tar -C "$tmpdir/rootfs" -xvf "$rootfs" >&3 2>&3
    else
        tar -C "$tmpdir/rootfs" -xf "$rootfs"
    fi
    umount "${device_p2}"
else
    # Make file image without being root
    log "Format and install partition from '$rootfs'"
    cat >"$tmpdir/mkrootfs" <<EOF
#!/bin/sh
mkdir -p "$tmpdir/rootfs"
tar -C "$tmpdir/rootfs" -xf "$rootfs"
$mkfsext4 -F "${device_p2}" -d "$tmpdir/rootfs/."  $mkfsext4_opts
EOF
    fakeroot /bin/sh -ex "$tmpdir/mkrootfs"
fi

# Copy the partition back to the image
if [[ ! "$blkdev" ]]; then
    log "Copy partition image data to '${device}'"
    dd if=${device_p2} of=${device} bs=512 count=${partinfo[2_sectors]} seek=${partinfo[2_start]} conv=sparse,notrunc
fi


#==============================================================================
log "Install partition 3 (preloader+bootloader)..."

p_device_p3="${device_p3#$PWD/}"

# Create the partition
if [[ ! "$blkdev" ]]; then
    log "Create image file '${p_device_p3}'"
    dd if=/dev/zero of=${device_p3} bs=512 count=${partinfo[3_sectors]} conv=sparse
fi

# Write the preloader and uboot to fixed locations in the partition
log "Install preloader '${preloader#$PWD/}'"
dd if=${preloader} of=${device_p3} bs=64k seek=0 conv=notrunc,sparse
log "Install u-boot '${uboot#$PWD/}'"
dd if=${uboot} of=${device_p3} bs=64k seek=4 conv=notrunc,sparse

# Copy the partition back to the image
if [[ ! "$blkdev" ]]; then
    log "Copy partition image data to '${device}'"
    dd if=${device_p3} of=${device} bs=512 count=${partinfo[3_sectors]} seek=${partinfo[3_start]} conv=sparse,notrunc
fi

log "Image completed"

}


#==============================================================================

# Run the actual commands
if [[ "$debug" ]]; then
    ( main 3>&1 )
else
    ( main 3>&1 >/dev/null 2>/dev/null )
fi
